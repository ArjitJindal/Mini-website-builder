import { SiteContent } from "../types";
import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export interface AIServiceResponse {
  success: boolean;
  content?: Partial<SiteContent>;
  error?: string;
}

interface AICommand {
  type: "heading" | "paragraph" | "theme";
  content: string;
}

export const aiService = {
  processCommand: async (prompt: string): Promise<AIServiceResponse> => {
    try {
      console.log("Processing AI command with prompt:", prompt);
      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: `You are a website content assistant. Generate appropriate content based on user prompts.
            Format your response as JSON with the following structure:
            {
              "type": "heading" | "paragraph" | "theme",
              "content": "your generated content here"
            }
            For themes, only use: default, modern, minimal, or elegant.
            Keep headings concise and under 60 characters.
            Keep paragraphs informative but concise.`,
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        temperature: 0.7,
        max_tokens: 150,
      });

      const response = completion.choices[0]?.message?.content;
      console.log("OpenAI response:", response);

      if (!response) {
        throw new Error("No response from AI");
      }

      try {
        const parsedResponse = JSON.parse(response) as AICommand;
        console.log("Parsed AI response:", parsedResponse);

        if (!parsedResponse.type || !parsedResponse.content) {
          throw new Error("Invalid AI response format");
        }

        if (
          parsedResponse.type === "theme" &&
          !["default", "modern", "minimal", "elegant"].includes(
            parsedResponse.content
          )
        ) {
          throw new Error("Invalid theme generated by AI");
        }

        return {
          success: true,
          content: {
            [parsedResponse.type === "heading"
              ? "heading"
              : parsedResponse.type === "theme"
              ? "theme"
              : "paragraphs"]:
              parsedResponse.type === "paragraph"
                ? [parsedResponse.content]
                : parsedResponse.content,
          },
        };
      } catch (parseError) {
        console.error("Error parsing AI response:", parseError);
        throw new Error("Failed to parse AI response");
      }
    } catch (error) {
      console.error("AI Service Error:", error);
      if (error instanceof Error) {
        console.error("Error details:", error.message);
        console.error("Error stack:", error.stack);
      }
      return {
        success: false,
        error:
          error instanceof Error
            ? error.message
            : "Failed to generate content with AI",
      };
    }
  },

  generateImprovedContent: async (
    prompt: string,
    currentContent: string
  ): Promise<string> => {
    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content:
              "You are a content improvement assistant. Enhance the given content while maintaining its core message.",
          },
          {
            role: "user",
            content: `Original content: "${currentContent}"\nImprovement request: "${prompt}"\nProvide improved version:`,
          },
        ],
        temperature: 0.7,
        max_tokens: 150,
      });

      const improvedContent = completion.choices[0]?.message?.content;
      if (!improvedContent) {
        throw new Error("No response from AI");
      }

      return improvedContent.trim();
    } catch (error) {
      console.error("AI Content Improvement Error:", error);
      throw new Error("Failed to improve content");
    }
  },

  suggestTheme: async (content: SiteContent): Promise<string> => {
    try {
      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: `You are a design assistant. Suggest one of these themes: default, modern, minimal, or elegant.
            Base your suggestion on the website content and tone.`,
          },
          {
            role: "user",
            content: `Heading: "${content.heading}"
            Paragraphs: "${content.paragraphs.join("\n")}"
            Suggest the most appropriate theme:`,
          },
        ],
        temperature: 0.3,
        max_tokens: 50,
      });

      const theme = completion.choices[0]?.message?.content
        ?.toLowerCase()
        .trim();

      if (
        !theme ||
        !["default", "modern", "minimal", "elegant"].includes(theme)
      ) {
        throw new Error("Invalid theme suggestion");
      }

      return theme;
    } catch (error) {
      console.error("AI Theme Suggestion Error:", error);
      return "default";
    }
  },
};
